{"ast":null,"code":"// Import ProductToken.sol here.\nexport default ((state, action) => {\n  switch (action.type) {\n    case 'TOKEN_AVAILABLE':\n      return { ...state,\n        products: state.products.map(product => {\n          if (product.name === action.product.name) {\n            const updatedProduct = { ...product,\n              available: action.available\n            };\n            return updatedProduct;\n          }\n\n          return product;\n        })\n      };\n\n    case 'TOKEN_PRICE':\n      return { ...state,\n        products: state.products.map(product => {\n          if (product.name === action.product.name) {\n            const updatedProduct = { ...product,\n              price: action.price\n            };\n            return updatedProduct;\n          }\n\n          return product;\n        })\n      };\n\n    case 'TOKEN_BOUGHT':\n      return { ...state,\n        products: state.products.map(product => {\n          if (product.name === action.payload) {\n            const updatedProduct = { ...product,\n              // call tokenInstance.buy() here with ether amount to buy one token\n              price: product.price * 1.13,\n              // price: tokenInstance.getCurrentPrice()\n              available: product.available - 1 // available: tokenInstance.getAvailability()\n\n            };\n            return updatedProduct;\n          }\n\n          return product;\n        })\n      };\n\n    case 'TOKEN_SOLD':\n      return { ...state,\n        products: state.products.map(product => {\n          if (product.name === action.payload) {\n            const updatedProduct = { ...product,\n              // arbitrary decrease price, will connect smart contract here\n              // call tokenInstance.sell(amount) here with desired sell unit\n              price: product.price * 0.9,\n              // price: tokenInstance.getCurrentPrice()\n              available: product.available + 1 // available: tokenInstance.getAvailability()\n\n            };\n            return updatedProduct;\n          }\n\n          return product;\n        })\n      };\n\n    case 'TOKEN_REDEEMED':\n      return { ...state,\n        products: state.products.map(product => {\n          if (product.name === action.payload) {\n            const updatedProduct = { ...product,\n              // burn token\n              // call tokenInstance.tradein(amount) here with desired sell unit\n              price: product.price * 1.15,\n              // price: tokenInstance.getCurrentPrice()\n              supply: product.supply - 1 // available: tokenInstance.getAvailability()\n\n            };\n            return updatedProduct;\n          }\n\n          return product;\n        })\n      };\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["/Users/traviswu/Desktop/landing/src/contexts/ProductReducer.js"],"names":["state","action","type","products","map","product","name","updatedProduct","available","price","payload","supply"],"mappings":"AAAA;AAEA,gBAAe,CAACA,KAAD,EAAQC,MAAR,KAAmB;AAChC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,iBAAL;AACE,aAAO,EACL,GAAGF,KADE;AAELG,QAAAA,QAAQ,EAAEH,KAAK,CAACG,QAAN,CAAeC,GAAf,CAAoBC,OAAD,IAAa;AACxC,cAAIA,OAAO,CAACC,IAAR,KAAiBL,MAAM,CAACI,OAAP,CAAeC,IAApC,EAA0C;AACxC,kBAAMC,cAAc,GAAG,EACrB,GAAGF,OADkB;AAErBG,cAAAA,SAAS,EAAEP,MAAM,CAACO;AAFG,aAAvB;AAIA,mBAAOD,cAAP;AACD;;AACD,iBAAOF,OAAP;AACD,SATS;AAFL,OAAP;;AAaF,SAAK,aAAL;AACE,aAAO,EACL,GAAGL,KADE;AAELG,QAAAA,QAAQ,EAAEH,KAAK,CAACG,QAAN,CAAeC,GAAf,CAAoBC,OAAD,IAAa;AACxC,cAAIA,OAAO,CAACC,IAAR,KAAiBL,MAAM,CAACI,OAAP,CAAeC,IAApC,EAA0C;AACxC,kBAAMC,cAAc,GAAG,EACrB,GAAGF,OADkB;AAErBI,cAAAA,KAAK,EAAER,MAAM,CAACQ;AAFO,aAAvB;AAIA,mBAAOF,cAAP;AACD;;AACD,iBAAOF,OAAP;AACD,SATS;AAFL,OAAP;;AAaF,SAAK,cAAL;AACE,aAAO,EACL,GAAGL,KADE;AAELG,QAAAA,QAAQ,EAAEH,KAAK,CAACG,QAAN,CAAeC,GAAf,CAAoBC,OAAD,IAAa;AACxC,cAAIA,OAAO,CAACC,IAAR,KAAiBL,MAAM,CAACS,OAA5B,EAAqC;AACnC,kBAAMH,cAAc,GAAG,EACrB,GAAGF,OADkB;AAErB;AACAI,cAAAA,KAAK,EAAEJ,OAAO,CAACI,KAAR,GAAgB,IAHF;AAGQ;AAC7BD,cAAAA,SAAS,EAAEH,OAAO,CAACG,SAAR,GAAoB,CAJV,CAIY;;AAJZ,aAAvB;AAMA,mBAAOD,cAAP;AACD;;AACD,iBAAOF,OAAP;AACD,SAXS;AAFL,OAAP;;AAgBF,SAAK,YAAL;AACE,aAAO,EACL,GAAGL,KADE;AAELG,QAAAA,QAAQ,EAAEH,KAAK,CAACG,QAAN,CAAeC,GAAf,CAAoBC,OAAD,IAAa;AACxC,cAAIA,OAAO,CAACC,IAAR,KAAiBL,MAAM,CAACS,OAA5B,EAAqC;AACnC,kBAAMH,cAAc,GAAG,EACrB,GAAGF,OADkB;AAErB;AACA;AACAI,cAAAA,KAAK,EAAEJ,OAAO,CAACI,KAAR,GAAgB,GAJF;AAIO;AAC5BD,cAAAA,SAAS,EAAEH,OAAO,CAACG,SAAR,GAAoB,CALV,CAKY;;AALZ,aAAvB;AAOA,mBAAOD,cAAP;AACD;;AACD,iBAAOF,OAAP;AACD,SAZS;AAFL,OAAP;;AAiBF,SAAK,gBAAL;AACE,aAAO,EACL,GAAGL,KADE;AAELG,QAAAA,QAAQ,EAAEH,KAAK,CAACG,QAAN,CAAeC,GAAf,CAAoBC,OAAD,IAAa;AACxC,cAAIA,OAAO,CAACC,IAAR,KAAiBL,MAAM,CAACS,OAA5B,EAAqC;AACnC,kBAAMH,cAAc,GAAG,EACrB,GAAGF,OADkB;AAErB;AACA;AACAI,cAAAA,KAAK,EAAEJ,OAAO,CAACI,KAAR,GAAgB,IAJF;AAIQ;AAC7BE,cAAAA,MAAM,EAAEN,OAAO,CAACM,MAAR,GAAiB,CALJ,CAKM;;AALN,aAAvB;AAOA,mBAAOJ,cAAP;AACD;;AACD,iBAAOF,OAAP;AACD,SAZS;AAFL,OAAP;;AAgBF;AACE,aAAOL,KAAP;AAlFJ;AAoFD,CArFD","sourcesContent":["// Import ProductToken.sol here.\n\nexport default (state, action) => {\n  switch (action.type) {\n    case 'TOKEN_AVAILABLE':\n      return {\n        ...state,\n        products: state.products.map((product) => {\n          if (product.name === action.product.name) {\n            const updatedProduct = {\n              ...product,\n              available: action.available\n            };\n            return updatedProduct;\n          }\n          return product;\n        })\n      };\n    case 'TOKEN_PRICE':\n      return {\n        ...state,\n        products: state.products.map((product) => {\n          if (product.name === action.product.name) {\n            const updatedProduct = {\n              ...product,\n              price: action.price\n            };\n            return updatedProduct;\n          }\n          return product;\n        })\n      };\n    case 'TOKEN_BOUGHT':\n      return {\n        ...state,\n        products: state.products.map((product) => {\n          if (product.name === action.payload) {\n            const updatedProduct = {\n              ...product,\n              // call tokenInstance.buy() here with ether amount to buy one token\n              price: product.price * 1.13, // price: tokenInstance.getCurrentPrice()\n              available: product.available - 1 // available: tokenInstance.getAvailability()\n            };\n            return updatedProduct;\n          }\n          return product;\n        })\n      };\n\n    case 'TOKEN_SOLD':\n      return {\n        ...state,\n        products: state.products.map((product) => {\n          if (product.name === action.payload) {\n            const updatedProduct = {\n              ...product,\n              // arbitrary decrease price, will connect smart contract here\n              // call tokenInstance.sell(amount) here with desired sell unit\n              price: product.price * 0.9, // price: tokenInstance.getCurrentPrice()\n              available: product.available + 1 // available: tokenInstance.getAvailability()\n            };\n            return updatedProduct;\n          }\n          return product;\n        })\n      };\n\n    case 'TOKEN_REDEEMED':\n      return {\n        ...state,\n        products: state.products.map((product) => {\n          if (product.name === action.payload) {\n            const updatedProduct = {\n              ...product,\n              // burn token\n              // call tokenInstance.tradein(amount) here with desired sell unit\n              price: product.price * 1.15, // price: tokenInstance.getCurrentPrice()\n              supply: product.supply - 1 // available: tokenInstance.getAvailability()\n            };\n            return updatedProduct;\n          }\n          return product;\n        })\n      };\n    default:\n      return state;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}