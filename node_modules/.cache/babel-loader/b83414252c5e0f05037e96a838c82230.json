{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useContext, useEffect } from 'react';\nimport { ethers } from 'ethers';\nimport StoreProvider from '../../contexts/StoreProvider';\nexport default function useLoadInjectedEthersState() {\n  _s();\n\n  const {\n    store,\n    setSelectedEthAddr,\n    setEthBalance,\n    setEthersProvider\n  } = useContext(StoreProvider.context);\n  useEffect(() => {\n    if (store.injectedProvider) {\n      if (store.injectedProvider.selectedAddress) {\n        // dispatch({\n        //   type: ActionType.SET_SELECTED_ETH_ADDR,\n        //   payload: state.injectedProvider.selectedAddress\n        // });\n        setSelectedEthAddr(store.injectedProvider);\n      } else {\n        console.warn('dont have selected address, yet');\n      }\n    }\n  }, [store.injectedProvider]);\n  useEffect(() => {\n    const fetchBalance = async () => {\n      if (store.injectedProvider) {\n        const provider = new ethers.providers.Web3Provider(store.injectedProvider);\n        const balance = await provider.getBalance(store.selectedEthAddr);\n        const converted = await ethers.utils.formatEther(balance);\n        setEthersProvider(provider);\n        setEthBalance(converted);\n      }\n    };\n\n    if (store.selectedEthAddr) {\n      fetchBalance();\n    }\n  }, [store.selectedEthAddr]);\n}\n\n_s(useLoadInjectedEthersState, \"A7JlpMJwl5V69zNWESmMfdogh58=\");","map":{"version":3,"sources":["/Users/sd/Documents/GitHub/virtualmarket/landing/src/components/Hooks/useLoadInjectedEthersState.js"],"names":["useContext","useEffect","ethers","StoreProvider","useLoadInjectedEthersState","store","setSelectedEthAddr","setEthBalance","setEthersProvider","context","injectedProvider","selectedAddress","console","warn","fetchBalance","provider","providers","Web3Provider","balance","getBalance","selectedEthAddr","converted","utils","formatEther"],"mappings":";;AAAA,SAASA,UAAT,EAAqBC,SAArB,QAAsC,OAAtC;AACA,SAASC,MAAT,QAAuB,QAAvB;AAEA,OAAOC,aAAP,MAA0B,8BAA1B;AAEA,eAAe,SAASC,0BAAT,GAAsC;AAAA;;AACnD,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA,kBAAT;AAA6BC,IAAAA,aAA7B;AAA4CC,IAAAA;AAA5C,MAAkER,UAAU,CAACG,aAAa,CAACM,OAAf,CAAlF;AAEAR,EAAAA,SAAS,CAAC,MAAM;AACd,QAAII,KAAK,CAACK,gBAAV,EAA4B;AAC1B,UAAIL,KAAK,CAACK,gBAAN,CAAuBC,eAA3B,EAA4C;AAC1C;AACA;AACA;AACA;AAEAL,QAAAA,kBAAkB,CAACD,KAAK,CAACK,gBAAP,CAAlB;AACD,OAPD,MAOO;AACLE,QAAAA,OAAO,CAACC,IAAR,CAAa,iCAAb;AACD;AACF;AACF,GAbQ,EAaN,CAACR,KAAK,CAACK,gBAAP,CAbM,CAAT;AAeAT,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMa,YAAY,GAAG,YAAY;AAC/B,UAAIT,KAAK,CAACK,gBAAV,EAA4B;AAC1B,cAAMK,QAAQ,GAAG,IAAIb,MAAM,CAACc,SAAP,CAAiBC,YAArB,CAAkCZ,KAAK,CAACK,gBAAxC,CAAjB;AACA,cAAMQ,OAAO,GAAG,MAAMH,QAAQ,CAACI,UAAT,CAAoBd,KAAK,CAACe,eAA1B,CAAtB;AACA,cAAMC,SAAS,GAAG,MAAMnB,MAAM,CAACoB,KAAP,CAAaC,WAAb,CAAyBL,OAAzB,CAAxB;AAEAV,QAAAA,iBAAiB,CAACO,QAAD,CAAjB;AACAR,QAAAA,aAAa,CAACc,SAAD,CAAb;AACD;AACF,KATD;;AAWA,QAAIhB,KAAK,CAACe,eAAV,EAA2B;AACzBN,MAAAA,YAAY;AACb;AACF,GAfQ,EAeN,CAACT,KAAK,CAACe,eAAP,CAfM,CAAT;AAgBD;;GAlCuBhB,0B","sourcesContent":["import { useContext, useEffect } from 'react';\nimport { ethers } from 'ethers';\n\nimport StoreProvider from '../../contexts/StoreProvider';\n\nexport default function useLoadInjectedEthersState() {\n  const { store, setSelectedEthAddr, setEthBalance, setEthersProvider } = useContext(StoreProvider.context);\n\n  useEffect(() => {\n    if (store.injectedProvider) {\n      if (store.injectedProvider.selectedAddress) {\n        // dispatch({\n        //   type: ActionType.SET_SELECTED_ETH_ADDR,\n        //   payload: state.injectedProvider.selectedAddress\n        // });\n\n        setSelectedEthAddr(store.injectedProvider);\n      } else {\n        console.warn('dont have selected address, yet');\n      }\n    }\n  }, [store.injectedProvider]);\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      if (store.injectedProvider) {\n        const provider = new ethers.providers.Web3Provider(store.injectedProvider);\n        const balance = await provider.getBalance(store.selectedEthAddr);\n        const converted = await ethers.utils.formatEther(balance);\n\n        setEthersProvider(provider);\n        setEthBalance(converted);\n      }\n    };\n\n    if (store.selectedEthAddr) {\n      fetchBalance();\n    }\n  }, [store.selectedEthAddr]);\n}\n"]},"metadata":{},"sourceType":"module"}