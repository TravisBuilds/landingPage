"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RULE_NAME = void 0;
const node_utils_1 = require("../node-utils");
const create_testing_library_rule_1 = require("../create-testing-library-rule");
exports.RULE_NAME = 'no-wait-for-side-effects';
exports.default = create_testing_library_rule_1.createTestingLibraryRule({
    name: exports.RULE_NAME,
    meta: {
        type: 'suggestion',
        docs: {
            description: "It's preferred to avoid side effects in `waitFor`",
            category: 'Best Practices',
            recommended: false,
        },
        messages: {
            noSideEffectsWaitFor: 'Avoid using side effects within `waitFor` callback',
        },
        schema: [],
    },
    defaultOptions: [],
    create: function (context, _, helpers) {
        function getSideEffectNodes(body) {
            return body.filter((node) => {
                if (!node_utils_1.isExpressionStatement(node)) {
                    return false;
                }
                const expressionIdentifier = node_utils_1.getPropertyIdentifierNode(node);
                if (!expressionIdentifier) {
                    return false;
                }
                return (helpers.isFireEventUtil(expressionIdentifier) ||
                    helpers.isUserEventUtil(expressionIdentifier));
            });
        }
        function reportSideEffects(node) {
            if (!node.parent) {
                return;
            }
            const callExpressionNode = node.parent.parent;
            const callExpressionIdentifier = node_utils_1.getPropertyIdentifierNode(callExpressionNode);
            if (!callExpressionIdentifier) {
                return;
            }
            if (!helpers.isAsyncUtil(callExpressionIdentifier, ['waitFor'])) {
                return;
            }
            const sideEffectNodes = getSideEffectNodes(node.body);
            if (sideEffectNodes.length === 0) {
                return;
            }
            for (const sideEffectNode of sideEffectNodes) {
                context.report({
                    node: sideEffectNode,
                    messageId: 'noSideEffectsWaitFor',
                });
            }
        }
        return {
            'CallExpression > ArrowFunctionExpression > BlockStatement': reportSideEffects,
            'CallExpression > FunctionExpression > BlockStatement': reportSideEffects,
        };
    },
});
